/*******************************************************************************
 * Copyright (c) 2018-2019 Aion foundation.
 *
 *     This file is part of the aion network project.
 *
 *     The aion network project is free software: you can redistribute it
 *     and/or modify it under the terms of the GNU General Public License
 *     as published by the Free Software Foundation, either version 3 of
 *     the License, or any later version.
 *
 *     The aion network project is distributed in the hope that it will
 *     be useful, but WITHOUT ANY WARRANTY; without even the implied
 *     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *     See the GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with the aion network project source files.
 *     If not, see <https://www.gnu.org/licenses/>.
 *
 ******************************************************************************/
use std::sync::Arc;
use acore_bytes::Bytes;
use rustc_hex::FromHex;
use aion_types::{U512,U256, U128, Address};
use vms::{
    ActionParams,
    ActionValue,
    CallType,
    EnvInfo,
    ExecutionResult,
    ExecStatus,
    ReturnData
};
use state::{Substate, CleanupMode};
use transaction::{Action, Transaction, SignedTransaction, DEFAULT_TRANSACTION_TYPE, AVM_TRANSACTION_TYPE};
use types::error::{ExecutionError};
use executive::{Executive, contract_address};
use avm_abi::{AVMEncoder, AbiToken, ToBytes};

use helpers::{get_temp_state,make_aion_machine};

#[test]
fn test_contract_address() {
    let address = Address::from_slice(b"0f572e5295c57f15886f9b263e2f6d2d6c7b5ec6");
    let expected_address = Address::from_slice(
        "a016b8bcce0d4c68b7e8c92ffd89ac633124c30447cd5cf48c1eb264308d5afb"
            .from_hex()
            .unwrap()
            .as_slice(),
    ); //Address::from_slice(b"3f09c73a5ed19289fb9bdc72f1742566df146f56");
    assert_eq!(
        expected_address,
        contract_address(&address, &U256::from(88),).0
    );
}

#[test]
// Tracing is not suported in JIT
fn bytearraymap_test() {
    let code = "60506040526000356c01000000000000000000000000900463ffffffff16806326121ff01461004957806375ed12351461005f578063e2179b8e146100fd57610043565b60006000fd5b34156100555760006000fd5b61005d61018d565b005b341561006b5760006000fd5b6100816004808035906010019091905050610275565b6040518080601001828103825283818151815260100191508051906010019080838360005b838110156100c25780820151818401525b6010810190506100a6565b50505050905090810190600f1680156100ef5780820380516001836010036101000a031916815260100191505b509250505060405180910390f35b34156101095760006000fd5b61011161032c565b6040518080601001828103825283818151815260100191508051906010019080838360005b838110156101525780820151818401525b601081019050610136565b50505050905090810190600f16801561017f5780820380516001836010036101000a031916815260100191505b509250505060405180910390f35b6101956103f5565b6104006040518059106101a55750595b9080825280601002601001820160405280156101bc575b5090506f610000000000000000000000000000008160008151811015156101df57fe5b9060100101906effffffffffffffffffffffffffffff1916908160001a9053506f62000000000000000000000000000000816103ff81518110151561022057fe5b9060100101906effffffffffffffffffffffffffffff1916908160001a9053508060006000506000602081526010019081526010016000209050600050908051906010019061027092919061040c565b505b50565b600060005060105280600052602060002090506000915090508054600181600116156101000203166002900480600f0160108091040260100160405190810160405280929190818152601001828054600181600116156101000203166002900480156103245780600f106102f757610100808354040283529160100191610324565b8201919060005260106000209050905b81548152906001019060100180831161030757829003600f168201915b505050505081565b6103346103f5565b600060005060006020815260100190815260100160002090506000508054600181600116156101000203166002900480600f0160108091040260100160405190810160405280929190818152601001828054600181600116156101000203166002900480156103e65780600f106103b9576101008083540402835291601001916103e6565b8201919060005260106000209050905b8154815290600101906010018083116103c957829003600f168201915b505050505090506103f2565b90565b601060405190810160405280600081526010015090565b8280546001816001161561010002031660029004906000526010600020905090600f016010900481019282600f1061044f57805160ff1916838001178555610482565b82800160010185558215610482579182015b828111156104815782518260005090905591601001919060010190610461565b5b50905061048f9190610493565b5090565b6104bb919061049d565b808211156104b7576000818150600090555060010161049d565b5090565b905600a165627a7a72305820a9b457c98ced88e9dda94a6ec2b32e69b1dc8ed693342b427da048636174f4c60029".from_hex().unwrap();

    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    println!("test address = {:?}", address);
    // TODO: add tests for 'callcreate'
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    params.data = Some("26121ff0".from_hex().unwrap());
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);
    let machine = make_aion_machine();
    let mut substate = Substate::new();

    let ExecutionResult {
        gas_left,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);
    assert_eq!(gas_left, U256::from(441091));

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    params.data = Some("e2179b8e".from_hex().unwrap());

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);
    let expected_data = "000000000000000000000000000000100000000000000000000000000000040061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000062".from_hex().unwrap();
    let expected_result = ReturnData::new(expected_data.clone(), 0, expected_data.len());
    assert_eq!(return_data, expected_result);
}

#[test]
fn test_create_contract() {
    // Tracing is not supported in JIT
    // code:
    //
    // 60 10 - push 16
    // 80 - duplicate first stack item
    // 60 0c - push 12
    // 60 00 - push 0
    // 39 - copy current code to memory
    // 60 00 - push 0
    // f3 - return

    let code = "601080600c6000396000f3006000355415600957005b60203560003555"
        .from_hex()
        .unwrap();

    println!("start create_contract test");
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    // TODO: add tests for 'callcreate'
    println!("new contract addr = {:?}", address);
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(100_000);
    params.code = Some(Arc::new(code));
    params.value = ActionValue::Transfer(0.into());
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let mut substate = Substate::new();

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);
}

#[test]
// Tracing is not suported in JIT
fn fibonacci() {
    let code = "60506040526000356c01000000000000000000000000900463ffffffff1680631dae897214610054578063231e93d41461008c5780639d4cd86c146100c4578063ff40565e146100fc5761004e565b60006000fd5b34156100605760006000fd5b6100766004808035906010019091905050610134565b6040518082815260100191505060405180910390f35b34156100985760006000fd5b6100ae6004808035906010019091905050610264565b6040518082815260100191505060405180910390f35b34156100d05760006000fd5b6100e660048080359060100190919050506102ae565b6040518082815260100191505060405180910390f35b34156101085760006000fd5b61011e60048080359060100190919050506102da565b6040518082815260100191505060405180910390f35b600061013e610344565b60006001841115156101565783925061025d5661025c565b600184016040518059106101675750595b90808252806010026010018201604052801561017e575b509150600082600081518110151561019257fe5b9060100190601002019090818152601001505060018260018151811015156101b657fe5b90601001906010020190908181526010015050600290505b838111151561023d5781600282038151811015156101e857fe5b90601001906010020151826001830381518110151561020357fe5b9060100190601002015101828281518110151561021c57fe5b906010019060100201909081815260100150505b80600101905080506101ce565b818481518110151561024b57fe5b90601001906010020151925061025d565b5b5050919050565b600060018211151561027c578190506102a9566102a8565b61028e6002830361026463ffffffff16565b6102a06001840361026463ffffffff16565b0190506102a9565b5b919050565b600060328211156102bf5760006000fd5b6102ce826102da63ffffffff16565b90506102d5565b919050565b600060006000600060006001861115156102fa5785945061033b5661033a565b600193506001925060009150600290505b858110156103325782840191508150829350835081925082505b806001019050805061030b565b82945061033b565b5b50505050919050565b6010604051908101604052806000815260100150905600a165627a7a72305820f201655c186b2446b8c23b5699eabfb66793e2b97e8cadb17b212b3bc71afe600029".from_hex().unwrap();

    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "ff40565e".from_hex().unwrap();
    call_data.append(&mut <[u8; 16]>::from(U128::from(6)).to_vec());
    params.data = Some(call_data);
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);
    let machine = make_aion_machine();
    let mut substate = Substate::new();

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        println!("call executor");
        ex.call(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "231e93d4".from_hex().unwrap();
    call_data.append(&mut <[u8; 16]>::from(U128::from(6)).to_vec());
    params.data = Some(call_data);

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "1dae8972".from_hex().unwrap();
    call_data.append(&mut <[u8; 16]>::from(U128::from(6)).to_vec());
    params.data = Some(call_data);

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "9d4cd86c".from_hex().unwrap();
    call_data.append(&mut <[u8; 16]>::from(U128::from(6)).to_vec());
    params.data = Some(call_data);

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "9d4cd86c".from_hex().unwrap();
    call_data.append(&mut <[u8; 16]>::from(U128::from(1024)).to_vec());
    params.data = Some(call_data);

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Revert);
}

#[test]
// Tracing is not suported in JIT
fn recursive() {
    let code = "605060405234156100105760006000fd5b610015565b610199806100246000396000f30060506040526000356c01000000000000000000000000900463ffffffff1680632d7df21a146100335761002d565b60006000fd5b341561003f5760006000fd5b6100666004808080601001359035909160200190919290803590601001909190505061007c565b6040518082815260100191505060405180910390f35b6000600060007f66fa32225b641331dff20698cd66d310b3149e86d875926af7ea2f2a9079e80b856040518082815260100191505060405180910390a18585915091506001841115156100d55783925061016456610163565b60018282632d7df21a898960018a036000604051601001526040518463ffffffff166c010000000000000000000000000281526004018084848252816010015260200182815260100193505050506010604051808303816000888881813b151561013f5760006000fd5b5af1151561014d5760006000fd5b5050505060405180519060100150019250610164565b5b505093925050505600a165627a7a72305820c4755a8b960e01280a2c8d85fae255d08e1be318b2c2685a948e7b42660c2f5c0029".from_hex().unwrap();

    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(100_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(0.into());
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let mut substate = Substate::new();

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };

    assert_eq!((*return_data).to_vec(), "60506040526000356c01000000000000000000000000900463ffffffff1680632d7df21a146100335761002d565b60006000fd5b341561003f5760006000fd5b6100666004808080601001359035909160200190919290803590601001909190505061007c565b6040518082815260100191505060405180910390f35b6000600060007f66fa32225b641331dff20698cd66d310b3149e86d875926af7ea2f2a9079e80b856040518082815260100191505060405180910390a18585915091506001841115156100d55783925061016456610163565b60018282632d7df21a898960018a036000604051601001526040518463ffffffff166c010000000000000000000000000281526004018084848252816010015260200182815260100193505050506010604051808303816000888881813b151561013f5760006000fd5b5af1151561014d5760006000fd5b5050505060405180519060100150019250610164565b5b505093925050505600a165627a7a72305820c4755a8b960e01280a2c8d85fae255d08e1be318b2c2685a948e7b42660c2f5c0029".from_hex().unwrap());
    assert_eq!(status_code, ExecStatus::Success);

    let code = &(*return_data);

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "2d7df21a".from_hex().unwrap();
    println!("contract address = {:?}", address);
    call_data.append(&mut <[u8; 32]>::from(address.clone()).to_vec());
    call_data.append(&mut <[u8; 16]>::from(U128::from(2)).to_vec());
    params.data = Some(call_data);
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);

    let code = "60506040526000356c01000000000000000000000000900463ffffffff1680632d7df21a146100335761002d565b60006000fd5b341561003f5760006000fd5b6100666004808080601001359035909160200190919290803590601001909190505061007c565b6040518082815260100191505060405180910390f35b6000600060007f66fa32225b641331dff20698cd66d310b3149e86d875926af7ea2f2a9079e80b856040518082815260100191505060405180910390a18585915091506001841115156100d55783925061016456610163565b60018282632d7df21a898960018a036000604051601001526040518463ffffffff166c010000000000000000000000000281526004018084848252816010015260200182815260100193505050506010604051808303816000888881813b151561013f5760006000fd5b5af1151561014d5760006000fd5b5050505060405180519060100150019250610164565b5b505093925050505600a165627a7a72305820c4755a8b960e01280a2c8d85fae255d08e1be318b2c2685a948e7b42660c2f5c0029".from_hex().unwrap();

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "2d7df21a".from_hex().unwrap();
    info!(target: "vm", "contract address = {:?}", address);
    call_data.append(&mut <[u8; 32]>::from(address.clone()).to_vec());
    call_data.append(&mut <[u8; 16]>::from(U128::from(129)).to_vec());
    params.data = Some(call_data);
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Revert);
}

#[test]
fn transfer() {
    let code = "605060405260636000600050909055341561001a5760006000fd5b61001f565b60c88061002d6000396000f30060506040526000356c01000000000000000000000000900463ffffffff168063c1cfb99a14603b578063f43fa805146057576035565b60006000fd5b6041607e565b6040518082815260100191505060405180910390f35b341560625760006000fd5b6068608b565b6040518082815260100191505060405180910390f35b6000303190506088565b90565b600060006000505490506099565b905600a165627a7a723058209d7cceee22377b5b19f0cbdfb6548ba4a3c94538bd66831bf7d16349565dfdf10029".from_hex().unwrap();

    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(100_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(0.into());
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let mut substate = Substate::new();

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };

    //assert_eq!(mem, "6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b802926914604e578063f43fa80514606a575b600080fd5b60546092565b6040518082815260200191505060405180910390f35b348015607557600080fd5b50607c60b1565b6040518082815260200191505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600080549050905600a165627a7a72305820b64352477fa36031aab85a988e2c96456bb81f07e01036304f21fc60137cc4610029".from_hex().unwrap());
    assert_eq!(status_code, ExecStatus::Success);

    let code = &*return_data;

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(10));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let call_data = "f43fa805".from_hex().unwrap();
    params.data = Some(call_data);
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };

    println!("return data = {:?}", return_data);
    assert_eq!(status_code, ExecStatus::Revert);

    let code = &*return_data;

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(89));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let call_data = "c1cfb99a".from_hex().unwrap();
    //call_data.append(&mut vec![189]);
    params.data = Some(call_data);
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);

    let ExecutionResult {
        gas_left: _,
        status_code: _,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };
}

#[test]
fn wallet() {
    let code = "".from_hex().unwrap();

    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(0.into());
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let mut substate = Substate::new();

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };

    //assert_eq!(mem, "6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b802926914604e578063f43fa80514606a575b600080fd5b60546092565b6040518082815260200191505060405180910390f35b348015607557600080fd5b50607c60b1565b6040518082815260200191505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600080549050905600a165627a7a72305820b64352477fa36031aab85a988e2c96456bb81f07e01036304f21fc60137cc4610029".from_hex().unwrap());
    assert_eq!(status_code, ExecStatus::Success);

    let code = &*return_data;

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1_000_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "797af627".from_hex().unwrap();
    call_data.append(
        &mut "7f4a14a00225c566fc11477d5febca8dec6ba6cda77d6d3f3e5a05bab9cf54b1"
            .from_hex()
            .unwrap(),
    );
    params.data = Some(call_data);
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };

    println!("return data = {:?}", return_data);
    assert_eq!(status_code, ExecStatus::Success);
}

#[test]
// Internal transactions
fn test_internal_transactions() {
    // internal_transactions.sol
    let code = "60506040525b5b61000b565b6104f88061001a6000396000f30060506040523615610054576000356c01000000000000000000000000900463ffffffff1680631e4198e01461008f5780636d73ac71146100af578063cc8066c8146100f8578063efc81a8c1461012d57610054565b5b7f656718b7d7f0803b58a7a46a3a5ca0a26696492f223276e7a227baba40fb95b7346040518082815260100191505060405180910390a15b005b6100ad6004808080601001359035909160200190919290505061015e565b005b34156100bb5760006000fd5b6100e2600480808060100135903590916020019091929080359060100190919050506101c8565b6040518082815260100191505060405180910390f35b34156101045760006000fd5b61012b60048080806010013590359091602001909192908035906010019091905050610295565b005b34156101395760006000fd5b610141610300565b604051808383825281601001526020019250505060405180910390f35b81816108fc34908115029060405160006040518083038185898989f1945050505050151561018c5760006000fd5b7f281a259dfd2e4aaf4447339f7e35909b8a423be045a738057d6c3c01e8d1f5a2346040518082815260100191505060405180910390a15b5050565b60006000600060008686925092506002838363f65a554b886000604051601001526040518263ffffffff166c01000000000000000000000000028152600401808281526010019150506010604051808303816000888881813b151561022d5760006000fd5b5af1151561023b5760006000fd5b50505050604051805190601001500190507ff56ebbc311e11d9790970c4f650e868d7c17a8c35e5c268477d6933ae010d1f4826040518082815260100191505060405180910390a180935061028b565b5050509392505050565b82826108fc83908115029060405160006040518083038185898989f194505050505015156102c35760006000fd5b7f3f418b40de968f04f1770399699cdfb8221fb37431187bf6ba88c8ef1cde63de826040518082815260100191505060405180910390a15b505050565b600060006000600061031061037e565b604051809103906000f080158215161561032a5760006000fd5b915091507f6092db4a9f98e713a99420bc27f1f1cdfcfd435af45397aeb05ffbee8d567d8e8383604051808383825281601001526020019250505060405180910390a1818193509350610378565b50509091565b60405161013e8061038f833901905600605060405234156100105760006000fd5b610015565b61011a806100246000396000f300605060405236156030576000356c01000000000000000000000000900463ffffffff168063f65a554b14606b576030565b3415603b5760006000fd5b5b7f6684c6fb8e464ba954e17ed3f5aed6e2d49231ce285b7770f422d1f52cef503b60405160405180910390a15b005b341560765760006000fd5b608a600480803590601001909190505060a0565b6040518082815260100191505060405180910390f35b600060006001830190507f3bc83dc4da931c34301105d9c2aff52e35bb96133cd1cf0a835faa9bb607422c826040518082815260100191505060405180910390a180915060e8565b509190505600a165627a7a72305820ec84292d19105cb4d6f311689eed4db3cb4e4251249a9cf06f071e1746e74de60029a165627a7a723058209d38411c6f215aa8daa7dd8150890ea7576a1b0e117cedffc3c002a95810948e0029".from_hex().unwrap();
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);
    let machine = make_aion_machine();
    let mut substate = Substate::new();
    let address = contract_address(&sender, &U256::zero()).0;
    // Create contract InternalTransaction
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(10.into());
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);
    assert_eq!((*return_data).to_vec(), "60506040523615610054576000356c01000000000000000000000000900463ffffffff1680631e4198e01461008f5780636d73ac71146100af578063cc8066c8146100f8578063efc81a8c1461012d57610054565b5b7f656718b7d7f0803b58a7a46a3a5ca0a26696492f223276e7a227baba40fb95b7346040518082815260100191505060405180910390a15b005b6100ad6004808080601001359035909160200190919290505061015e565b005b34156100bb5760006000fd5b6100e2600480808060100135903590916020019091929080359060100190919050506101c8565b6040518082815260100191505060405180910390f35b34156101045760006000fd5b61012b60048080806010013590359091602001909192908035906010019091905050610295565b005b34156101395760006000fd5b610141610300565b604051808383825281601001526020019250505060405180910390f35b81816108fc34908115029060405160006040518083038185898989f1945050505050151561018c5760006000fd5b7f281a259dfd2e4aaf4447339f7e35909b8a423be045a738057d6c3c01e8d1f5a2346040518082815260100191505060405180910390a15b5050565b60006000600060008686925092506002838363f65a554b886000604051601001526040518263ffffffff166c01000000000000000000000000028152600401808281526010019150506010604051808303816000888881813b151561022d5760006000fd5b5af1151561023b5760006000fd5b50505050604051805190601001500190507ff56ebbc311e11d9790970c4f650e868d7c17a8c35e5c268477d6933ae010d1f4826040518082815260100191505060405180910390a180935061028b565b5050509392505050565b82826108fc83908115029060405160006040518083038185898989f194505050505015156102c35760006000fd5b7f3f418b40de968f04f1770399699cdfb8221fb37431187bf6ba88c8ef1cde63de826040518082815260100191505060405180910390a15b505050565b600060006000600061031061037e565b604051809103906000f080158215161561032a5760006000fd5b915091507f6092db4a9f98e713a99420bc27f1f1cdfcfd435af45397aeb05ffbee8d567d8e8383604051808383825281601001526020019250505060405180910390a1818193509350610378565b50509091565b60405161013e8061038f833901905600605060405234156100105760006000fd5b610015565b61011a806100246000396000f300605060405236156030576000356c01000000000000000000000000900463ffffffff168063f65a554b14606b576030565b3415603b5760006000fd5b5b7f6684c6fb8e464ba954e17ed3f5aed6e2d49231ce285b7770f422d1f52cef503b60405160405180910390a15b005b341560765760006000fd5b608a600480803590601001909190505060a0565b6040518082815260100191505060405180910390f35b600060006001830190507f3bc83dc4da931c34301105d9c2aff52e35bb96133cd1cf0a835faa9bb607422c826040518082815260100191505060405180910390a180915060e8565b509190505600a165627a7a72305820ec84292d19105cb4d6f311689eed4db3cb4e4251249a9cf06f071e1746e74de60029a165627a7a723058209d38411c6f215aa8daa7dd8150890ea7576a1b0e117cedffc3c002a95810948e0029".from_hex().unwrap());
    assert_eq!(state.balance(&sender).unwrap(), U256::from(90));
    assert_eq!(state.balance(&address).unwrap(), U256::from(10));
    assert_eq!(state.nonce(&address).unwrap(), U256::from(0));

    // Transfer value through contract
    let code = &*return_data;
    let receiver = Address::from_slice(b"ef1722f3947def4cf144679da39c4c32bdc35681");
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1_000_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(10));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "1e4198e0".from_hex().unwrap();
    call_data.append(&mut <[u8; 32]>::from(receiver.clone()).to_vec());
    params.data = Some(call_data);
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Success);
    assert_eq!(state.balance(&sender).unwrap(), U256::from(80));
    assert_eq!(state.balance(&address).unwrap(), U256::from(10));
    assert_eq!(state.balance(&receiver).unwrap(), U256::from(10));
    assert_eq!(state.nonce(&address).unwrap(), U256::from(0));

    // Ask contract contract to transfer value
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1_000_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "cc8066c8".from_hex().unwrap();
    call_data.append(&mut <[u8; 32]>::from(receiver.clone()).to_vec());
    call_data.append(&mut <[u8; 16]>::from(U128::from(5)).to_vec());
    params.data = Some(call_data);
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Success);
    assert_eq!(state.balance(&sender).unwrap(), U256::from(80));
    assert_eq!(state.balance(&address).unwrap(), U256::from(5));
    assert_eq!(state.balance(&receiver).unwrap(), U256::from(15));
    assert_eq!(state.nonce(&address).unwrap(), U256::from(0));

    // Create contract NewContract from contract InternalTransaction
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(210_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let call_data = "efc81a8c".from_hex().unwrap();
    params.data = Some(call_data);
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Success);

    let new_address = Address::from(&*return_data);
    assert_eq!(state.nonce(&address).unwrap(), U256::from(1));
    assert_eq!(state.nonce(&new_address).unwrap(), U256::from(1));

    // Call NewContract's function from InternalTransaction
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1_000_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "6d73ac71".from_hex().unwrap();
    call_data.append(&mut <[u8; 32]>::from(new_address).to_vec());
    call_data.append(&mut <[u8; 16]>::from(U128::from(1)).to_vec());
    params.data = Some(call_data);
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Success);

    assert_eq!(
        (*return_data).to_vec(),
        "00000000000000000000000000000004".from_hex().unwrap()
    );
    assert_eq!(state.nonce(&address).unwrap(), U256::from(1));
    assert_eq!(state.nonce(&new_address).unwrap(), U256::from(1));
}

#[test]
fn error_cases_rejected() {
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let machine = make_aion_machine();
    let mut info = EnvInfo::default();
    info.gas_limit = U256::from(3_000_000);
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();

    // 1. Invalid gas limit
    // 1.1 Transaction gas limit exceeds block gas limit
    let transaction: Transaction = Transaction::new(
        U256::zero(),
        U256::zero(),
        U256::from(4_000_000),
        Action::Create,
        0.into(),
        Bytes::new(),
        DEFAULT_TRANSACTION_TYPE,
        None,
    );
    let signed_transaction: SignedTransaction = transaction.fake_sign(sender);
    let error = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.transact(&signed_transaction, true, false, true)
            .unwrap_err()
    };
    assert_eq!(
        error,
        ExecutionError::BlockGasLimitReached {
            gas_limit: U256::from(3_000_000),
            gas_used: U256::from(0),
            gas: U256::from(4_000_000),
        }
    );

    // 1.2 Transaction gas limit exceeds max gas limit (create)
    info.gas_limit = U256::from(10_000_000);
    let transaction: Transaction = Transaction::new(
        U256::zero(),
        U256::zero(),
        U256::from(6_000_000),
        Action::Create,
        0.into(),
        Bytes::new(),
        DEFAULT_TRANSACTION_TYPE,
        None,
    );
    let signed_transaction: SignedTransaction = transaction.fake_sign(sender);
    let error = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.transact(&signed_transaction, true, false, true)
            .unwrap_err()
    };
    assert_eq!(
        error,
        ExecutionError::ExceedMaxGasLimit {
            max: U256::from(5_000_000),
            got: U256::from(6_000_000),
        }
    );

    // 1.3 Transaction gas limit exceeds max gas limit (call)
    let transaction: Transaction = Transaction::new(
        U256::zero(),
        U256::zero(),
        U256::from(3_000_000),
        Action::Call(0.into()),
        0.into(),
        Bytes::new(),
        DEFAULT_TRANSACTION_TYPE,
        None,
    );
    let signed_transaction: SignedTransaction = transaction.fake_sign(sender);
    let error = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.transact(&signed_transaction, true, false, true)
            .unwrap_err()
    };
    assert_eq!(
        error,
        ExecutionError::ExceedMaxGasLimit {
            max: U256::from(2_000_000),
            got: U256::from(3_000_000),
        }
    );

    // 1.4 Transaction does not have enough base gas (create)
    let data = "605060405234156100105760006000fd5b610015565b610199806100246000396000f30060506040526000356c01000000000000000000000000900463ffffffff1680632d7df21a146100335761002d565b60006000fd5b341561003f5760006000fd5b6100666004808080601001359035909160200190919290803590601001909190505061007c565b6040518082815260100191505060405180910390f35b6000600060007f66fa32225b641331dff20698cd66d310b3149e86d875926af7ea2f2a9079e80b856040518082815260100191505060405180910390a18585915091506001841115156100d55783925061016456610163565b60018282632d7df21a898960018a036000604051601001526040518463ffffffff166c010000000000000000000000000281526004018084848252816010015260200182815260100193505050506010604051808303816000888881813b151561013f5760006000fd5b5af1151561014d5760006000fd5b5050505060405180519060100150019250610164565b5b505093925050505600a165627a7a72305820c4755a8b960e01280a2c8d85fae255d08e1be318b2c2685a948e7b42660c2f5c0029".from_hex().unwrap();
    let transaction: Transaction = Transaction::new(
        U256::zero(),
        U256::zero(),
        U256::from(1_000),
        Action::Create,
        0.into(),
        data,
        DEFAULT_TRANSACTION_TYPE,
        None,
    );
    let signed_transaction: SignedTransaction = transaction.fake_sign(sender);
    let result = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.transact(&signed_transaction, true, false, true)
    };
    assert_eq!(
        result.unwrap_err(),
        ExecutionError::NotEnoughBaseGas {
            required: U256::from(200_000),
            got: U256::from(1_000),
        }
    );
    //    assert!(result.is_ok());

    // 1.5 Transaction does not have enough base gas (call)
    let data = "2d7df21a".from_hex().unwrap();
    let transaction: Transaction = Transaction::new(
        U256::zero(),
        U256::zero(),
        U256::from(1_000),
        Action::Call(0.into()),
        0.into(),
        data,
        DEFAULT_TRANSACTION_TYPE,
        None,
    );
    let signed_transaction: SignedTransaction = transaction.fake_sign(sender);
    let result = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.transact(&signed_transaction, true, false, true)
    };
    assert_eq!(
        result.unwrap_err(),
        ExecutionError::NotEnoughBaseGas {
            required: U256::from(21_000),
            got: U256::from(1_000),
        }
    );
    //    assert!(result.is_ok());

    // 2. Insufficient balance
    let transaction: Transaction = Transaction::new(
        U256::zero(),
        U256::from(1),
        U256::from(50_000),
        Action::Call(0.into()),
        1000.into(),
        Bytes::new(),
        DEFAULT_TRANSACTION_TYPE,
        None,
    );
    let signed_transaction: SignedTransaction = transaction.fake_sign(sender);
    let error = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.transact(&signed_transaction, true, false, true)
            .unwrap_err()
    };
    assert_eq!(
        error,
        ExecutionError::NotEnoughCash {
            required: U512::from(51_000),
            got: U512::from(100),
        }
    );

    // 3. Invalid nonce
    let transaction: Transaction = Transaction::new(
        U256::from(4),
        U256::from(0),
        U256::from(50_000),
        Action::Call(0.into()),
        0.into(),
        Bytes::new(),
        DEFAULT_TRANSACTION_TYPE,
        None,
    );
    let signed_transaction: SignedTransaction = transaction.fake_sign(sender);
    let error = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.transact(&signed_transaction, true, false, true)
            .unwrap_err()
    };
    assert_eq!(
        error,
        ExecutionError::InvalidNonce {
            expected: U256::zero(),
            got: U256::from(4),
        }
    );
}

#[test]
fn error_cases_revert() {
    let code = "605060405234156100105760006000fd5b610015565b610199806100246000396000f30060506040526000356c01000000000000000000000000900463ffffffff1680632d7df21a146100335761002d565b60006000fd5b341561003f5760006000fd5b6100666004808080601001359035909160200190919290803590601001909190505061007c565b6040518082815260100191505060405180910390f35b6000600060007f66fa32225b641331dff20698cd66d310b3149e86d875926af7ea2f2a9079e80b856040518082815260100191505060405180910390a18585915091506001841115156100d55783925061016456610163565b60018282632d7df21a898960018a036000604051601001526040518463ffffffff166c010000000000000000000000000281526004018084848252816010015260200182815260100193505050506010604051808303816000888881813b151561013f5760006000fd5b5af1151561014d5760006000fd5b5050505060405180519060100150019250610164565b5b505093925050505600a165627a7a72305820c4755a8b960e01280a2c8d85fae255d08e1be318b2c2685a948e7b42660c2f5c0029".from_hex().unwrap();

    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;

    // 1. Create non payable contract with value transfer
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(1.into());
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let mut substate = Substate::new();
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Revert);

    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(0.into());
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };

    //assert_eq!(mem, "6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b802926914604e578063f43fa80514606a575b600080fd5b60546092565b6040518082815260200191505060405180910390f35b348015607557600080fd5b50607c60b1565b6040518082815260200191505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600080549050905600a165627a7a72305820b64352477fa36031aab85a988e2c96456bb81f07e01036304f21fc60137cc4610029".from_hex().unwrap());
    assert_eq!(status_code, ExecStatus::Success);
    let code = &*return_data;

    // Call non payable function with value transfer
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1_000_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(1));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    println!("revert test starts");
    let mut call_data = "2d7df21a".from_hex().unwrap();
    println!("contract address = {:?}", address);
    call_data.append(&mut <[u8; 32]>::from(address.clone()).to_vec());
    call_data.append(&mut <[u8; 16]>::from(U128::from(2)).to_vec());
    params.data = Some(call_data);
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };
    println!("return data = {:?}", return_data);
    assert_eq!(status_code, ExecStatus::Revert);

    // Call contract reverts when called contract gets error or runs out of gas
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1_000_000);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    println!("revert test starts");
    let mut call_data = "2d7df21a".from_hex().unwrap();
    println!("contract address = {:?}", address);
    call_data.append(&mut <[u8; 32]>::from(address.clone()).to_vec());
    call_data.append(&mut <[u8; 16]>::from(U128::from(129)).to_vec());
    params.data = Some(call_data);
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };
    println!("return data = {:?}", return_data);
    assert_eq!(status_code, ExecStatus::Revert);
}

#[test]
fn error_cases_failure() {
    // Create contract on already existing address
    let code = "605060405234156100105760006000fd5b610015565b610199806100246000396000f30060506040526000356c01000000000000000000000000900463ffffffff1680632d7df21a146100335761002d565b60006000fd5b341561003f5760006000fd5b6100666004808080601001359035909160200190919290803590601001909190505061007c565b6040518082815260100191505060405180910390f35b6000600060007f66fa32225b641331dff20698cd66d310b3149e86d875926af7ea2f2a9079e80b856040518082815260100191505060405180910390a18585915091506001841115156100d55783925061016456610163565b60018282632d7df21a898960018a036000604051601001526040518463ffffffff166c010000000000000000000000000281526004018084848252816010015260200182815260100193505050506010604051808303816000888881813b151561013f5760006000fd5b5af1151561014d5760006000fd5b5050505060405180519060100150019250610164565b5b505093925050505600a165627a7a72305820c4755a8b960e01280a2c8d85fae255d08e1be318b2c2685a948e7b42660c2f5c0029".from_hex().unwrap();
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let mut params = ActionParams::default();
    params.address = sender.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(100_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(0.into());
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let mut substate = Substate::new();
    let ExecutionResult {
        gas_left,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Failure);
    assert_eq!(gas_left, U256::from(0));
}

#[test]
fn error_cases_out_of_gas() {
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let mut substate = Substate::new();
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);
    let machine = make_aion_machine();

    // 1. Deploy bad code
    let code = "ff".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(0.into());
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };
    assert_eq!(status_code, ExecStatus::OutOfGas);

    // 2. Run out of gas
    let code = "605060405234156100105760006000fd5b610015565b610199806100246000396000f30060506040526000356c01000000000000000000000000900463ffffffff1680632d7df21a146100335761002d565b60006000fd5b341561003f5760006000fd5b6100666004808080601001359035909160200190919290803590601001909190505061007c565b6040518082815260100191505060405180910390f35b6000600060007f66fa32225b641331dff20698cd66d310b3149e86d875926af7ea2f2a9079e80b856040518082815260100191505060405180910390a18585915091506001841115156100d55783925061016456610163565b60018282632d7df21a898960018a036000604051601001526040518463ffffffff166c010000000000000000000000000281526004018084848252816010015260200182815260100193505050506010604051808303816000888881813b151561013f5760006000fd5b5af1151561014d5760006000fd5b5050505060405180519060100150019250610164565b5b505093925050505600a165627a7a72305820c4755a8b960e01280a2c8d85fae255d08e1be318b2c2685a948e7b42660c2f5c0029".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(100_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(0.into());
    let machine = make_aion_machine();

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };

    assert_eq!(status_code, ExecStatus::Success);
    let code = &*return_data;
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(100);
    params.code = Some(Arc::new(code.clone().to_vec()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);
    let mut call_data = "2d7df21a".from_hex().unwrap();
    println!("contract address = {:?}", address);
    call_data.append(&mut <[u8; 32]>::from(address.clone()).to_vec());
    call_data.append(&mut <[u8; 16]>::from(U128::from(2)).to_vec());
    params.data = Some(call_data);
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params, &mut substate)
    };
    assert_eq!(status_code, ExecStatus::OutOfGas);
}

#[test]
fn create_empty_contract() {
    // Create contract on already existing address
    let code: Vec<u8> = Vec::new();
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(0.into());
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let mut substate = Substate::new();
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data,
        exception,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params, &mut substate)
    };
    println!("exception: {:?}", exception);
    assert_eq!(status_code, ExecStatus::Success);

    assert_eq!((*return_data).is_empty(), true);
    assert_eq!(state.commit().is_ok(), true);
    assert_eq!(
        state.root().to_vec(),
        "522f7176a4724330ee2423d5cf34c687eb32adc3fab752cbb4ab03a25dc6e0cc"
            .from_hex()
            .unwrap()
    );
}

#[test]
fn static_call() {
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let mut substate = Substate::new();
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);
    let machine = make_aion_machine();

    // Call ofter StaticCall with zero value
    let code = "6f000000000000000000000000000000006f000000000000000000000000000000006f000000000000000000000000000000006f0000000000000000000000000000000034305af1".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(0.into());
    params.call_type = CallType::Call;
    params.static_flag = true;
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params.clone(), &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Success);
    assert_eq!(state.balance(&params.address).unwrap(), U256::from(0));

    // Call after StaticCall with non-zero value
    let code = "6f000000000000000000000000000000006f000000000000000000000000000000006f000000000000000000000000000000006f0000000000000000000000000000000034305af1".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(10.into());
    params.call_type = CallType::Call;
    params.static_flag = true;
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params.clone(), &mut substate)
    };
    assert_eq!(status_code, ExecStatus::OutOfGas);
    assert_eq!(state.balance(&params.address).unwrap(), U256::from(0));

    // CallCode after StaticCall with non-zero value
    let code = "6f000000000000000000000000000000006f000000000000000000000000000000006f000000000000000000000000000000006f0000000000000000000000000000000034305af2".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(10.into());
    params.call_type = CallType::Call;
    params.static_flag = true;
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params.clone(), &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Success);
    assert_eq!(state.balance(&params.address).unwrap(), U256::from(10));

    // DelegateCall after StaticCall with non-zero value
    let code = "6f000000000000000000000000000000006f000000000000000000000000000000006f000000000000000000000000000000006f0000000000000000000000000000000034305af4".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(10.into());
    params.call_type = CallType::Call;
    params.static_flag = true;
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params.clone(), &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Success);
    assert_eq!(state.balance(&params.address).unwrap(), U256::from(20));

    // DelegateCall after Call with non-zero value
    let code = "6f000000000000000000000000000000006f000000000000000000000000000000006f000000000000000000000000000000006f0000000000000000000000000000000034305af4".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(10.into());
    params.call_type = CallType::Call;
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params.clone(), &mut substate)
    };
    assert_eq!(status_code, ExecStatus::Success);
    assert_eq!(state.balance(&params.address).unwrap(), U256::from(30));

    // StaticCall with sstore
    let code = "6f000000000000000000000000000000006f000000000000000000000000000000006f000000000000000000000000000000006f0000000000000000000000000000000060346f000000000000000000000000000000015534305af1".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(10.into());
    params.call_type = CallType::Call;
    params.static_flag = true;
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params.clone(), &mut substate)
    };
    assert_eq!(status_code, ExecStatus::OutOfGas);
    assert_eq!(state.balance(&params.address).unwrap(), U256::from(30));

    // StaticCall with log
    let code = "6f000000000000000000000000000000006f000000000000000000000000000000006f000000000000000000000000000000006f00000000000000000000000000000000a034305af1".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(10.into());
    params.call_type = CallType::Call;
    params.static_flag = true;
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params.clone(), &mut substate)
    };
    assert_eq!(status_code, ExecStatus::OutOfGas);
    assert_eq!(state.balance(&params.address).unwrap(), U256::from(30));

    // StaticCall with selfdestruct
    let code = "6f000000000000000000000000000000006f000000000000000000000000000000006f000000000000000000000000000000006f00000000000000000000000000000000ff34305af1".from_hex().unwrap();
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(10_000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(10.into());
    params.call_type = CallType::Call;
    params.static_flag = true;
    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call(params.clone(), &mut substate)
    };
    assert_eq!(status_code, ExecStatus::OutOfGas);
    assert_eq!(state.balance(&params.address).unwrap(), U256::from(30));
}

#[test]
fn avm_recursive() {
    let mut file = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    // NOTE: tested with avm v1.3
    file.push("src/tests/avmjars/demo-0.3.0.jar");
    let file_str = file.to_str().expect("Failed to locate the demo.jar");
    let mut code = read_file(file_str).expect("unable to open avm dapp");
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(5_000_000);
    let mut avm_code: Vec<u8> = (code.len() as u32).to_vm_bytes();
    println!("code of hello_avm = {:?}", code.len());
    avm_code.append(&mut code);
    params.code = Some(Arc::new(avm_code.clone()));
    params.value = ActionValue::Transfer(0.into());
    params.call_type = CallType::None;
    params.gas_price = 1.into();
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(200_000_000), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let substate = Substate::new();
    let execution_results = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call_avm(vec![params.clone()], &mut [substate])
    };

    for r in execution_results {
        let ExecutionResult {
            status_code,
            gas_left: _,
            return_data,
            exception: _,
            state_root: _,
            invokable_hashes: _,
        } = r;

        assert_eq!(status_code, ExecStatus::Success);

        params.address = (*return_data).into();
        println!("return data = {:?}", return_data);
    }

    // Hello avm is deployed

    assert!(state.code(&params.address).unwrap().is_some());

    params.call_type = CallType::Call;
    // let call_data = AbiToken::STRING(String::from("callExt")).encode();
    let mut call_data = AbiToken::STRING(String::from("recursive")).encode();
    // for QA recursive
    let mut target = [0u8; 32];
    target.copy_from_slice(&params.address[..]);
    call_data.append(&mut AbiToken::ADDRESS(target).encode());
    call_data.append(&mut AbiToken::INT32(10).encode());
    // call_data.append(&mut AbiToken::INT32(1).encode());
    // temp QA ends
    params.data = Some(call_data);
    params.nonce += 1;
    params.gas = U256::from(2_000_000);
    println!("call data = {:?}", params.data);
    let substate = Substate::new();
    let execution_results = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call_avm(vec![params.clone()], &mut [substate.clone()])
    };

    for r in execution_results {
        let ExecutionResult {
            status_code,
            gas_left,
            return_data: _,
            exception: _,
            state_root: _,
            invokable_hashes: _,
        } = r;

        println!("gas left = {:?}", gas_left);
        assert_eq!(status_code, ExecStatus::Success);
    }
}

#[test]
fn get_vote() {
    let mut file = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    // NOTE: tested with avm v1.3
    file.push("src/tests/avmjars/unity-staking.jar");
    let file_str = file
        .to_str()
        .expect("Failed to locate the unity-staking.jar");
    let mut code = read_file(file_str).expect("unable to open avm dapp");
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(5_000_000);
    let mut avm_code: Vec<u8> = (code.len() as u32).to_vm_bytes();
    println!("code of hello_avm = {:?}", code.len());
    avm_code.append(&mut code);
    params.code = Some(Arc::new(avm_code.clone()));
    params.value = ActionValue::Transfer(0.into());
    params.call_type = CallType::None;
    params.gas_price = 1.into();
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(200_000_000), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let substate = Substate::new();
    let execution_results = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call_avm(vec![params.clone()], &mut [substate])
    };

    for r in execution_results {
        let ExecutionResult {
            status_code,
            gas_left: _,
            return_data,
            exception: _,
            state_root: _,
            invokable_hashes: _,
        } = r;

        assert_eq!(status_code, ExecStatus::Success);

        params.address = (*return_data).into();
        println!("return data = {:?}", return_data);
    }

    assert!(state.code(&params.address).unwrap().is_some());

    // register
    params.call_type = CallType::Call;
    let mut call_data = AbiToken::STRING(String::from("register")).encode();
    call_data.append(&mut AbiToken::ADDRESS(params.sender.into()).encode());
    params.data = Some(call_data);
    params.nonce += 1;
    params.gas = U256::from(2_000_000);
    params.value = ActionValue::Transfer(0.into());
    println!("call data = {:?}", params.data);
    let substate = Substate::new();
    let execution_results = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call_avm(vec![params.clone()], &mut [substate.clone()])
    };

    for r in execution_results {
        let ExecutionResult {
            status_code,
            gas_left,
            return_data,
            exception: _,
            state_root: _,
            invokable_hashes: _,
        } = r;

        println!("gas left = {:?}, output = {:?}", gas_left, return_data);
        assert_eq!(status_code, ExecStatus::Success);
    }

    // Vote
    params.call_type = CallType::Call;
    let mut call_data = AbiToken::STRING(String::from("vote")).encode();
    call_data.append(&mut AbiToken::ADDRESS(params.sender.into()).encode());
    params.data = Some(call_data);
    params.nonce += 1;
    params.gas = U256::from(2_000_000);
    params.value = ActionValue::Transfer(999.into());
    println!("call data = {:?}", params.data);
    let substate = Substate::new();
    let execution_results = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call_avm(vec![params.clone()], &mut [substate.clone()])
    };

    for r in execution_results {
        let ExecutionResult {
            status_code,
            gas_left,
            return_data,
            exception: _,
            state_root: _,
            invokable_hashes: _,
        } = r;

        println!("gas left = {:?}, output = {:?}", gas_left, return_data);
        assert_eq!(status_code, ExecStatus::Success);
    }

    params.call_type = CallType::Call;
    let mut call_data = AbiToken::STRING(String::from("getVote")).encode();
    call_data.append(&mut AbiToken::ADDRESS(params.sender.into()).encode());
    params.data = Some(call_data);
    params.nonce += 1;
    params.gas = U256::from(2_000_000);
    params.value = ActionValue::Transfer(0.into());
    println!("call data = {:?}", params.data);
    let substate = Substate::new();
    let execution_results = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call_avm(vec![params.clone()], &mut [substate.clone()])
    };

    for r in execution_results {
        let ExecutionResult {
            status_code,
            gas_left,
            return_data,
            exception: _,
            state_root: _,
            invokable_hashes: _,
        } = r;

        println!("gas left = {:?}, output = {:?}", gas_left, return_data);
        assert_eq!(status_code, ExecStatus::Success);
        assert_eq!(return_data.to_vec(), vec![3, 231]);
    }
}

#[test]
/// HelloWorld with extra storage test
fn hello_avm() {
    let mut file = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    // NOTE: tested with avm v1.3
    file.push("src/tests/avmjars/demo-0.2.0.jar");
    let file_str = file.to_str().expect("Failed to locate the demo.jar");
    let mut code = read_file(file_str).expect("unable to open avm dapp");
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(5_000_000);
    let mut avm_code: Vec<u8> = (code.len() as u32).to_vm_bytes();
    println!("code of hello_avm = {:?}", code.len());
    avm_code.append(&mut code);
    params.code = Some(Arc::new(avm_code.clone()));
    params.value = ActionValue::Transfer(0.into());
    params.call_type = CallType::None;
    params.gas_price = 1.into();
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(200_000_000), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let substate = Substate::new();
    let execution_results = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call_avm(vec![params.clone()], &mut [substate])
    };

    for r in execution_results {
        let ExecutionResult {
            status_code,
            gas_left: _,
            return_data,
            exception: _,
            state_root: _,
            invokable_hashes: _,
        } = r;

        assert_eq!(status_code, ExecStatus::Success);

        params.address = (*return_data).into();
        println!("return data = {:?}", return_data);
    }

    // Hello avm is deployed

    assert!(state.code(&params.address).unwrap().is_some());

    params.call_type = CallType::Call;
    let call_data = AbiToken::STRING(String::from("callExt")).encode();
    params.data = Some(call_data);
    params.nonce += 1;
    params.gas = U256::from(2_000_000);
    println!("call data = {:?}", params.data);
    let substate = Substate::new();
    let execution_results = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call_avm(vec![params.clone()], &mut [substate.clone()])
    };

    for r in execution_results {
        let ExecutionResult {
            status_code,
            gas_left,
            return_data: _,
            exception: _,
            state_root: _,
            invokable_hashes: _,
        } = r;

        println!("gas left = {:?}", gas_left);
        assert_eq!(status_code, ExecStatus::Success);
    }

    // params.call_type = CallType::Call;
    // let mut call_data = AbiToken::STRING(String::from("recursive")).encode();
    // call_data.append(&mut AbiToken::ADDRESS(params.address.into()).encode());
    // call_data.append(&mut AbiToken::INT32(10).encode());

    // params.data = Some(call_data);
    // params.nonce += 1;
    // params.gas = U256::from(2_000_000);
    // println!("call data = {:?}", params.data);
    // let substate = Substate::new();
    // let execution_results = {
    //     let mut ex = Executive::new(&mut state, &info, &machine);
    //     ex.call_avm(vec![params.clone()], &mut [substate.clone()])
    // };

    // for r in execution_results {
    //     let ExecutionResult {
    //         status_code,
    //         gas_left: _,
    //         return_data,
    //         exception: _,
    //         state_root,
    //     } = r;

    //     assert_eq!(status_code, ExecStatus::Success);
    // }

    // test key/value storage
    // params.call_type = CallType::Call;
    // let call_data = AbiToken::STRING(String::from("storageTest")).encode();
    // params.data = Some(call_data);
    // params.nonce += 1;
    // params.gas = U256::from(2_000_000);
    // println!("call data = {:?}", params.data);
    // let substate = Substate::new();
    // let execution_results = {
    //     let mut ex = Executive::new(&mut state, &info, &machine);
    //     ex.call_avm(vec![params.clone()], &mut [substate.clone()])
    // };

    // for r in execution_results {
    //     let ExecutionResult {
    //         status_code,
    //         gas_left: _,
    //         return_data,
    //         exception: _,
    //         state_root,
    //     } = r;

    //     assert_eq!(status_code, ExecStatus::Success);
    //     println!(
    //         "result state root = {:?}, return_data = {:?}",
    //         state_root, return_data
    //     );
    //     assert_eq!(return_data.to_vec(), vec![0u8, 2, 3, 4]);
    // }

    // assert_eq!(
    //     state
    //         .storage_at(
    //             &params.address,
    //             &vec![
    //                 1u8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4,
    //                 5, 6, 7, 8, 9, 10, 1, 2,
    //             ]
    //         )
    //         .unwrap(),
    //     vec![0u8, 2, 3, 4]
    // );
}

use std::io::Error;
use std::fs::File;
use std::io::Read;
use std::path::PathBuf;
use std::path::Path;

fn read_file(path: &str) -> Result<Vec<u8>, Error> {
    let path = Path::new(path);
    println!("path = {:?}", path);
    let mut file = File::open(path)?;
    let mut buf = Vec::<u8>::new();
    file.read_to_end(&mut buf)?;
    Ok(buf)
}

#[test]
fn avm_storage() {
    let mut state = get_temp_state();
    let address = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    state
        .set_storage(&address, vec![0, 0, 0, 1], vec![0])
        .expect("avm set storage failed");
    let value = state
        .storage_at(&address, &vec![0, 0, 0, 1])
        .expect("avm get storage failed");
    assert_eq!(value, Some(vec![0]));
    state
        .set_storage(
            &address,
            vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 0],
            vec![1, 2, 3, 4, 5, 0, 0, 0, 2],
        )
        .expect("avm set storage failed");
    state
        .remove_storage(&address, vec![0, 0, 0, 1])
        .expect("remove failed");
    let value = state
        .storage_at(&address, &vec![0, 0, 0, 1])
        .expect("set storage failed");
    assert_eq!(value, None);
    // println!("state = {:?}", state);
}

#[test]
fn avm_balance_transfer() {
    let mut state = get_temp_state();
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let mut params = ActionParams::default();
    let address = contract_address(&sender, &U256::zero()).0;
    params.address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1_000_000);
    params.code = Some(Arc::new(vec![]));
    params.value = ActionValue::Transfer(100.into());
    params.call_type = CallType::BulkBalance;
    params.gas_price = 1.into();
    state
        .add_balance(&sender, &U256::from(50_000_000), CleanupMode::NoEmpty)
        .unwrap();
    let info = EnvInfo::default();
    let machine = make_aion_machine();
    let substate = Substate::new();
    let mut params2 = params.clone();
    params2.address = contract_address(&sender, &U256::one()).0;
    params2.value = ActionValue::Transfer(99.into());
    params2.nonce = params.nonce + 1;
    let results = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.call_avm(
            vec![params.clone(), params2.clone()],
            &mut [substate.clone(), substate.clone()],
        )
    };

    assert_eq!(results.len(), 2);
    assert_eq!(state.balance(&address), Ok(100.into()));
    assert_eq!(state.balance(&params2.address), Ok(99.into()));
}

#[test]
fn avm_status_rejected() {
    let mut file = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    // NOTE: tested with avm v1.3
    file.push("src/tests/avmjars/demo-0.2.0.jar");
    let file_str = file.to_str().expect("Failed to locate the demo.jar");
    let mut code = read_file(file_str).expect("unable to open avm dapp");
    let mut avm_code: Vec<u8> = (code.len() as u32).to_vm_bytes();
    println!("code of hello_avm = {:?}", code.len());
    avm_code.append(&mut code);

    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let machine = make_aion_machine();
    let mut info = EnvInfo::default();
    info.gas_limit = U256::from(3_000_000);
    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();

    // 1. Invalid gas limit
    // 1.1 Transaction gas limit exceeds block gas limit
    let transaction: Transaction = Transaction::new(
        U256::one(),
        U256::zero(),
        U256::from(4_000_000),
        Action::Create,
        0.into(),
        avm_code.clone(),
        DEFAULT_TRANSACTION_TYPE,
        None,
    );
    let signed_transaction: SignedTransaction = transaction.fake_sign(sender);
    let errors = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.transact_bulk(&[signed_transaction.clone()], false, true)
    };
    assert_eq!(
        errors[0].clone().unwrap_err(),
        ExecutionError::BlockGasLimitReached {
            gas_limit: U256::from(3_000_000),
            gas_used: U256::from(0),
            gas: U256::from(4_000_000),
        }
    );

    let transaction: Transaction = Transaction::new(
        U256::zero(),
        U256::zero(),
        U256::from(2_000_000),
        Action::Create,
        0.into(),
        avm_code.clone(),
        AVM_TRANSACTION_TYPE,
        None,
    );

    let signed_transaction: SignedTransaction = transaction.fake_sign(sender);
    let errors = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.transact_bulk(&[signed_transaction], false, true)
    };
    assert!(errors[0].is_ok());
}

#[test]
fn contract_create2() {
    // test internal creation to address with balance
    let code = "605060405234156100105760006000fd5b5b6000600061001d610043565b604051809103906000f08015821516156100375760006000fd5b915091505b5050610052565b60405160648061009a83390190565b603a806100606000396000f30060506040526008565b60006000fd00a165627a7a72305820fd53915fee1b05fe9bfd2e5c002fbc0a06e4b569cdf9cee967125a1bad38bbae0029605060405260006000600050909055341560195760006000fd5b601d565b603a80602a6000396000f30060506040526008565b60006000fd00a165627a7a7230582067ea917dd1ec8e15669ee107500f563855e03f1941e0a857e305c3f1754c16a40029".from_hex().unwrap();
    let sender = Address::from_slice(b"cd1722f3947def4cf144679da39c4c32bdc35681");
    let address = contract_address(&sender, &U256::zero()).0;
    let mut params = ActionParams::default();
    params.address = address.clone();
    params.code_address = address.clone();
    params.sender = sender.clone();
    params.origin = sender.clone();
    params.gas = U256::from(1000_000);
    params.code = Some(Arc::new(code.clone()));
    params.value = ActionValue::Transfer(U256::from(0));
    params.call_type = CallType::Call;
    params.gas_price = U256::from(0);

    let mut state = get_temp_state();
    state
        .add_balance(&sender, &U256::from(100), CleanupMode::NoEmpty)
        .unwrap();
    let inner_contract_address = "a007d071538ce40db67cc816def5ec8adc410858ee6cfda21e72300835b83754"
        .from_hex()
        .unwrap();
    state
        .add_balance(
            &inner_contract_address[..].into(),
            &100.into(),
            CleanupMode::NoEmpty,
        )
        .unwrap();
    let mut info = EnvInfo::default();
    info.number = 1;
    info.gas_limit = U256::from(1000000);
    info.author = Address::from(1);

    let machine = make_aion_machine();
    let mut substate = Substate::new();

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params.clone(), &mut substate)
    };

    // machine before aion040_fork returns failure on creation at existed account
    assert_eq!(status_code, ExecStatus::Revert);

    let mut machine = make_aion_machine();
    machine.set_monetary(0);
    let mut substate = Substate::new();

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params.clone(), &mut substate)
    };

    // machine after aion040_fork returns success on creation at exsited account which has no code
    assert_eq!(status_code, ExecStatus::Success);

    println!(
        "code = {:?}",
        state.code(&inner_contract_address[..].into())
    );

    let mut machine = make_aion_machine();
    machine.set_monetary(0);
    let mut substate = Substate::new();

    let ExecutionResult {
        gas_left: _,
        status_code,
        return_data: _,
        exception: _,
        state_root: _,
        invokable_hashes: _,
    } = {
        let mut ex = Executive::new(&mut state, &info, &machine);
        ex.create(params.clone(), &mut substate)
    };

    // normal creation of contract on account which already exists
    assert_eq!(status_code, ExecStatus::Success);
}
